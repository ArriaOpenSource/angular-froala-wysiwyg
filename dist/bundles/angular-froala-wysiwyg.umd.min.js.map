{"version":3,"sources":["../../src/editor/editor.directive.ts","../../src/editor/editor.module.ts","../../src/view/view.directive.ts","../../src/view/view.module.ts","../../src/index.ts"],"names":["FroalaEditorDirective","el","zone","this","_opts","immediateAngularModelUpdate","angularIgnoreAttrs","SPECIAL_TAGS","INNER_HTML_ATTR","_hasSpecialTag","_listeningEvents","_editorInitialized","_oldModel","onChange","_","onTouched","froalaModelChange","EventEmitter","froalaInit","element","nativeElement","indexOf","tagName","toLowerCase","_$element","$","prototype","writeValue","content","updateEditor","registerOnChange","fn","registerOnTouched","Object","defineProperty","opts","JSON","stringify","_model","setContent","froalaEditor","html","updateModel","_this","run","modelContent","attributeNodes","attributes","attrs","i","length","attrName","name","value","innerHTML","returnedHtml","emit","registerEvent","eventName","callback","push","on","initListeners","self","setTimeout","registerFroalaEvents","events","hasOwnProperty","createEditor","runOutsideAngular","_editor","data","$el","setHtml","firstTime","tags","attr","destroyEditor","off","join","getEditor","bind","generateManualController","controls","initialize","destroy","ngOnInit","observers","ngOnDestroy","Directive","args","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","Input","Output","FroalaEditorModule","forRoot","ngModule","NgModule","declarations","exports","FroalaViewDirective","renderer","_element","ngAfterViewInit","addClass","Renderer2","FroalaViewModule","MODULES","imports"],"mappings":"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","sourcesContent":["import { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Optional, Output, forwardRef } from '@angular/core';\r\n\r\ndeclare var $: JQueryStatic;\r\n\r\n\r\n@Directive({\r\n  selector: '[froalaEditor]',\r\n  exportAs: 'froalaEditor',\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR, useExisting:\r\n      forwardRef(() => FroalaEditorDirective),\r\n    multi: true\r\n  }]\r\n})\r\nexport class FroalaEditorDirective implements ControlValueAccessor {\r\n\r\n  // editor options\r\n  private _opts: any = {\r\n    immediateAngularModelUpdate: false,\r\n    angularIgnoreAttrs: null\r\n  };\r\n\r\n  // jquery wrapped element\r\n  private _$element: any;\r\n\r\n  private SPECIAL_TAGS: string[] = ['img', 'button', 'input', 'a'];\r\n  private INNER_HTML_ATTR: string = 'innerHTML';\r\n  private _hasSpecialTag: boolean = false;\r\n\r\n  // editor element\r\n  private _editor: any;\r\n\r\n  // initial editor content\r\n  private _model: string;\r\n\r\n  private _listeningEvents: string[] = [];\r\n\r\n  private _editorInitialized: boolean = false;\r\n\r\n  private _oldModel: string = null;\r\n\r\n  constructor(el: ElementRef, private zone: NgZone) {\r\n\r\n    let element: any = el.nativeElement;\r\n\r\n    // check if the element is a special tag\r\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\r\n      this._hasSpecialTag = true;\r\n    }\r\n\r\n    // jquery wrap and store element\r\n    this._$element = (<any>$(element));\r\n\r\n    this.zone = zone;\r\n  }\r\n\r\n  // Begin ControlValueAccesor methods.\r\n  onChange = (_) => { };\r\n  onTouched = () => { };\r\n\r\n  // Form model content changed.\r\n  writeValue(content: any): void {\r\n    this.updateEditor(content);\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\r\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\r\n  // End ControlValueAccesor methods.\r\n\r\n  // froalaEditor directive as input: store the editor options\r\n  @Input() set froalaEditor(opts: any) {\r\n    this._opts = opts || this._opts;\r\n  }\r\n\r\n  // froalaModel directive as input: store initial editor content\r\n  @Input() set froalaModel(content: any) {\r\n    this.updateEditor(content);\r\n  }\r\n\r\n  // Update editor with model contents.\r\n  private updateEditor(content: any) {\r\n    if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\r\n      return;\r\n    }\r\n\r\n    if (!this._hasSpecialTag) {\r\n      this._oldModel = content;\r\n    }\r\n    else {\r\n      this._model = content;\r\n    }\r\n\r\n    if (this._editorInitialized) {\r\n      if (!this._hasSpecialTag) {\r\n        this._$element.froalaEditor('html.set', content);\r\n      }\r\n      else {\r\n        this.setContent();\r\n      }\r\n    }\r\n    else {\r\n      if (!this._hasSpecialTag) {\r\n        this._$element.html(content);\r\n      }\r\n      else {\r\n        this.setContent();\r\n      }\r\n    }\r\n  }\r\n\r\n  // froalaModel directive as output: update model if editor contentChanged\r\n  @Output() froalaModelChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  // froalaInit directive as output: send manual editor initialization\r\n  @Output() froalaInit: EventEmitter<Object> = new EventEmitter<Object>();\r\n\r\n  // update model if editor contentChanged\r\n  private updateModel() {\r\n    this.zone.run(() => {\r\n\r\n      let modelContent: any = null;\r\n\r\n      if (this._hasSpecialTag) {\r\n\r\n        let attributeNodes = this._$element[0].attributes;\r\n        let attrs = {};\r\n\r\n        for (let i = 0; i < attributeNodes.length; i++) {\r\n\r\n          let attrName = attributeNodes[i].name;\r\n          if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\r\n            continue;\r\n          }\r\n\r\n          attrs[attrName] = attributeNodes[i].value;\r\n        }\r\n\r\n        if (this._$element[0].innerHTML) {\r\n          attrs[this.INNER_HTML_ATTR] = this._$element[0].innerHTML;\r\n        }\r\n\r\n        modelContent = attrs;\r\n      } else {\r\n\r\n        let returnedHtml: any = this._$element.froalaEditor('html.get');\r\n        if (typeof returnedHtml === 'string') {\r\n          modelContent = returnedHtml;\r\n        }\r\n      }\r\n      if (this._oldModel !== modelContent) {\r\n        this._oldModel = modelContent;\r\n\r\n        // Update froalaModel.\r\n        this.froalaModelChange.emit(modelContent);\r\n\r\n        // Update form model.\r\n        this.onChange(modelContent);\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  // register event on jquery element\r\n  private registerEvent(element, eventName, callback) {\r\n\r\n    if (!element || !eventName || !callback) {\r\n      return;\r\n    }\r\n\r\n    this._listeningEvents.push(eventName);\r\n    element.on(eventName, callback);\r\n  }\r\n\r\n  private initListeners() {\r\n\r\n    let self = this;\r\n\r\n    // bind contentChange and keyup event to froalaModel\r\n    this.registerEvent(this._$element, 'froalaEditor.contentChanged', function () {\r\n      setTimeout(function () {\r\n        self.updateModel();\r\n      }, 0);\r\n    });\r\n    this.registerEvent(this._$element, 'froalaEditor.mousedown', function () {\r\n      setTimeout(function () {\r\n        self.onTouched();\r\n      }, 0);\r\n    });\r\n\r\n    if (this._opts.immediateAngularModelUpdate) {\r\n      this.registerEvent(this._$element, 'keyup', function () {\r\n        setTimeout(function () {\r\n          self.updateModel();\r\n        }, 0);\r\n      });\r\n    }\r\n  }\r\n\r\n  // register events from editor options\r\n  private registerFroalaEvents() {\r\n\r\n    if (!this._opts.events) {\r\n      return;\r\n    }\r\n\r\n    for (let eventName in this._opts.events) {\r\n\r\n      if (this._opts.events.hasOwnProperty(eventName)) {\r\n        this.registerEvent(this._$element, eventName, this._opts.events[eventName]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private createEditor() {\r\n\r\n    if (this._editorInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.setContent(true);\r\n\r\n    // Registering events before initializing the editor will bind the initialized event correctly.\r\n    this.registerFroalaEvents();\r\n\r\n    this.initListeners();\r\n\r\n    // init editor\r\n    this.zone.runOutsideAngular(() => {\r\n      this._$element.on('froalaEditor.initialized', () => {\r\n        this._editorInitialized = true;\r\n      })\r\n\r\n      this._editor = this._$element.froalaEditor(this._opts).data('froala.editor').$el;\r\n    })\r\n  }\r\n\r\n  private setHtml() {\r\n    this._$element.froalaEditor('html.set', this._model || '', true);\r\n\r\n    // This will reset the undo stack everytime the model changes externally. Can we fix this?\r\n    this._$element.froalaEditor('undo.reset');\r\n    this._$element.froalaEditor('undo.saveStep');\r\n  }\r\n\r\n  private setContent(firstTime = false) {\r\n    let self = this;\r\n\r\n    // Set initial content\r\n    if (this._model || this._model == '') {\r\n      this._oldModel = this._model;\r\n      if (this._hasSpecialTag) {\r\n\r\n        let tags: Object = this._model;\r\n\r\n        // add tags on element\r\n        if (tags) {\r\n\r\n          for (let attr in tags) {\r\n            if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\r\n              this._$element.attr(attr, tags[attr]);\r\n            }\r\n          }\r\n\r\n          if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\r\n            this._$element[0].innerHTML = tags[this.INNER_HTML_ATTR];\r\n          }\r\n        }\r\n      } else {\r\n        if (firstTime) {\r\n          this.registerEvent(this._$element, 'froalaEditor.initialized', function () {\r\n            self.setHtml();\r\n          });\r\n        } else {\r\n          self.setHtml();\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  private destroyEditor() {\r\n    if (this._editorInitialized) {\r\n      this._$element.off(this._listeningEvents.join(\" \"));\r\n      this._editor.off('keyup');\r\n      this._$element.froalaEditor('destroy');\r\n      this._listeningEvents.length = 0;\r\n      this._editorInitialized = false;\r\n    }\r\n  }\r\n\r\n  private getEditor() {\r\n    if (this._$element) {\r\n      return this._$element.froalaEditor.bind(this._$element);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // send manual editor initialization\r\n  private generateManualController() {\r\n    let self = this;\r\n    let controls = {\r\n      initialize: this.createEditor.bind(this),\r\n      destroy: this.destroyEditor.bind(this),\r\n      getEditor: this.getEditor.bind(this),\r\n    };\r\n    this.froalaInit.emit(controls);\r\n  }\r\n\r\n  // TODO not sure if ngOnInit is executed after @inputs\r\n  ngOnInit() {\r\n    // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\r\n    if (!this.froalaInit.observers.length) {\r\n      this.createEditor();\r\n    } else {\r\n      this.generateManualController();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyEditor();\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\n\r\nimport { FroalaEditorDirective } from \"./editor.directive\";\r\n\r\n@NgModule({\r\n  declarations: [FroalaEditorDirective],\r\n  exports: [FroalaEditorDirective],\r\n})\r\nexport class FroalaEditorModule {\r\n  public static forRoot(): ModuleWithProviders<FroalaEditorModule> {\r\n    return { ngModule: FroalaEditorModule, providers: [] };\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[froalaView]'\r\n})\r\nexport class FroalaViewDirective {\r\n\r\n  private _element: HTMLElement;\r\n  private _content: any;\r\n\r\n  constructor(private renderer: Renderer2, element: ElementRef) {\r\n    this._element = element.nativeElement;\r\n  }\r\n\r\n  // update content model as it comes\r\n  @Input() set froalaView(content: string){\r\n    this._element.innerHTML = content;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.renderer.addClass(this._element, \"fr-view\");\r\n  }\r\n}","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\n\r\nimport { FroalaViewDirective } from \"./view.directive\";\r\n\r\n@NgModule({\r\n  declarations: [FroalaViewDirective],\r\n  exports: [FroalaViewDirective],\r\n})\r\nexport class FroalaViewModule {\r\n  public static forRoot(): ModuleWithProviders<FroalaViewModule> {\r\n    return { ngModule: FroalaViewModule, providers: [] };\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport {FroalaEditorModule} from './editor';\r\nimport {FroalaViewModule} from './view';\r\n\r\nexport {\r\n  FroalaEditorDirective,\r\n  FroalaEditorModule\r\n} from './editor';\r\n\r\nexport {\r\n  FroalaViewDirective,\r\n  FroalaViewModule\r\n} from './view';\r\n\r\nconst MODULES = [\r\n  FroalaEditorModule,\r\n  FroalaViewModule\r\n]\r\n\r\n@NgModule({\r\n imports: [\r\n   FroalaEditorModule.forRoot(),\r\n   FroalaViewModule.forRoot()\r\n ],\r\n exports: MODULES\r\n})\r\nexport class FERootModule {\r\n\r\n}"]}